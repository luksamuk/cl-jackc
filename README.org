#+TITLE: cl-jackc
#+AUTHOR: Lucas Vieira
#+EMAIL: lucasvieira@protonmail.com

* Introduction
This is a compiler for the Jack language, the high-level language of
the Hack platform, an exercise of the book The Elements of Computing
Systems, by Nisan and Schocken.

The Jack language is introduced on Chapter 9, and Chapters 10 and 11
are dedicated to building a simple compiler for such language, which
is what this project is.

This compiler was completely written in Common Lisp.

*Notice that this project is currently aiming to be Chapter-10-compliant-only.*
This means that the compiler is, for now, only fit for analyzing ~.jack~
files and outputting XML files for inspection.

* Modularization
This project takes a different approach when compared to other
projects of the book ([[https://github.com/luksamuk/cl-hackasm][cl-hackasm]], [[https://github.com/luksamuk/cl-hackvmtr][cl-hackvmtr]]), with respect to its
organization. The book talks about compiler modules, and so the
project is organized in modules as well, though not strictly as
suggested.

Each one of the project's packages correspond to a certain module of
the compiler. When doing this, instead of having separate binaries, we
just make sure that the packages are minimalistic and serve their
purpose explicitly. The user shall only interface with a single
package, which depends on the other modules, and works as a frontend.

** Module listing

- ~jackc-utils~

  Utilities and miscellaneous structures for all other compiler
  modules, usually related to language extension.

- ~cl-jackc~

  Default interface for compiler. Exports procedures so the user can
  interact with the compiler.

- ~jackc-reader~

  Takes compilation arguments and configuration, passed by the
  user. For each given file, generates a file stream and passes it to
  the analyzer.

- ~jackc-analyzer~

  Takes a single file stream, and invokes the tokenizer for
  it. Redirects the tokenizer's output to the parser.
  
  Relates to the /JackAnalyzer/ module, proposed in the book.

- ~jackc-tokenizer~

  Takes a file stream, produces an alist for it. The alist output
  resembles the expected XML after a single analysis step.
  
  Relates to the /JackTokenizer/ module, proposed in the book.

- ~jackc-parser~

  Takes the output of a file tokenization, and effectively compiles it
  to one of the desired outputs (XML or VM), outputting it to console.
  
  Relates to the /CompilationEngine/ module, proposed in the book.

- ~jackc-writer~

  Takes the console output of the parser, and writes it to the desired
  (~.xml~ or ~.vm~) file.

* Usage
This compiler is still alpha-quality software, so it might still not
have any user interface yet. Nevertheless, it is not ready for usage.

** Qlot support

This project uses qlot for both development and unit testing, so one
should be able to use this tool to either run or develop the
compiler.

Qlot assumes that you have [[https://github.com/roswell/roswell][Roswell]] installed, preferably running
SBCL. To install and configure qlot, simply run:

#+begin_src bash
ros install qlot
qlot install
#+end_src

To use qlot along with SLIME on Emacs, see [[https://github.com/fukamachi/qlot][qlot]]'s repository
documentation.

* Unit testing

This projects uses [[https://github.com/fukamachi/rove][rove]] for unit testing. For using it, a system
called ~cl-jackc/test~ is provided, which includes a number of test
suites for parts of the compiler.

Assuming that qlot is installed and configured, navigate to the
project's root directory and open the REPL:

#+begin_src bash
cd /path/to/cl-jackc
qlot run
#+end_src

When the Lisp REPL is opened, load the test system and use rove to run
the unit tests:

#+begin_src lisp
(ql:quickload :cl-jackc/test)
(rove:run :cl-jackc/test)
#+end_src

* License
This project is distributed under the MIT License.
Copyright (c) 2019 Lucas Vieira.
